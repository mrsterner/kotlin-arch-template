plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
            runtimeClasspath.extendsFrom common
            developmentFabric.extendsFrom common

            shadowBundle {
                canBeResolved = true
                canBeConsumed = false
            }
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
    runs {
        create("data") {
            client()
            name("Data Generation")
            vmArg("-Dfabric-api.datagen")
            vmArg "-Dfabric-api.datagen.output-dir=${project(':common').file("src/main/generated")}"
            vmArg("-Dfabric-api.datagen.modid=witchery")

            runDir("build/datagen")
        }
    }
}

repositories {
    maven{
        url = "https://api.modrinth.com/maven"
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    modImplementation("net.fabricmc:fabric-language-kotlin:${rootProject.fabric_language_kotlin_version}")

    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

    modCompileOnly "dev.emi:emi-fabric:${emi_version}:api"
    modLocalRuntime "dev.emi:emi-fabric:${emi_version}"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
    exclude "architectury.common.json"
}

remapJar {
    input.set shadowJar.archiveFile
}
